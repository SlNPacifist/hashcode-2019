<?xml version="1.0" encoding="UTF-8"?>
<solver xmlns="https://www.optaplanner.org/xsd/solver" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="https://www.optaplanner.org/xsd/solver https://www.optaplanner.org/xsd/solver/solver.xsd">
  <!--<environmentMode>FULL_ASSERT</environmentMode>--><!-- To slowly prove there are no bugs in this code -->

  <!--  To solve faster by saturating multiple CPU cores-->
<!--  <moveThreadCount>AUTO</moveThreadCount>-->

  <solutionClass>domain.Album</solutionClass>
  <entityClass>domain.Slot</entityClass>
  <environmentMode>FULL_ASSERT</environmentMode>

  <scoreDirectorFactory>
    <!--<easyScoreCalculatorClass>org.optaplanner.examples.nqueens.optional.score.NQueensEasyScoreCalculator</easyScoreCalculatorClass>-->
    <!--<easyScoreCalculatorClass>org.optaplanner.examples.nqueens.optional.score.NQueensMapBasedEasyScoreCalculator</easyScoreCalculatorClass>-->
    <!--<constraintProviderClass>org.optaplanner.examples.nqueens.optional.score.NQueensConstraintProvider</constraintProviderClass>-->
<!--    <constraintProviderClass>solver.GraphColoringConstraintProvider</constraintProviderClass>-->
<!--    <incrementalScoreCalculatorClass>org.optaplanner.examples.nqueens.optional.score.NQueensAdvancedIncrementalScoreCalculator</incrementalScoreCalculatorClass>-->
    <incrementalScoreCalculatorClass>solver.ScoreCalc</incrementalScoreCalculatorClass>
<!--    <scoreDrl>org/optaplanner/examples/nqueens/solver/nQueensConstraints.drl</scoreDrl>-->
<!--    <initializingScoreTrend>ONLY_DOWN</initializingScoreTrend>-->
    <!--<assertionScoreDirectorFactory>-->
      <!--<easyScoreCalculatorClass>org.optaplanner.examples.nqueens.optional.score.NQueensEasyScoreCalculator</easyScoreCalculatorClass>-->
    <!--</assertionScoreDirectorFactory>-->
  </scoreDirectorFactory>

  <termination>
    <unimprovedSecondsSpentLimit>10</unimprovedSecondsSpentLimit>
<!--    <bestScoreLimit>0</bestScoreLimit>-->
  </termination>
  <constructionHeuristic>
<!--    <constructionHeuristicType>FIRST_FIT_DECREASING</constructionHeuristicType>-->
  </constructionHeuristic>
  <localSearch>
    <moveListFactory>
      <moveListFactoryClass>solver.PlaceSlideMoveFactory</moveListFactoryClass>
    </moveListFactory>
<!--    <changeMoveSelector>-->
<!--      <selectionOrder>ORIGINAL</selectionOrder>-->
<!--    </changeMoveSelector>-->
    <!-- changeMoveSelector is the generic form of RowChangeMoveFactory: -->
    <!--<moveListFactory>-->
      <!--<moveListFactoryClass>org.optaplanner.examples.nqueens.optional.solver.move.factory.RowChangeMoveFactory</moveListFactoryClass>-->
    <!--</moveListFactory>-->
<!--    <acceptor>-->
<!--      <entityTabuSize>5</entityTabuSize>-->
<!--    </acceptor>-->
<!--    <forager>-->
      <!-- Real world problems require use of <acceptedCountLimit> -->
<!--    </forager>-->
  </localSearch>

  <!-- To scale out, replace <localSearch> with this configuration: -->
  <!--<localSearch>-->
    <!--<acceptor>-->
      <!--<entityTabuSize>11</entityTabuSize>-->
    <!--</acceptor>-->
    <!--<forager>-->
      <!--<acceptedCountLimit>2000</acceptedCountLimit>-->
      <!--<pickEarlyType>FIRST_BEST_SCORE_IMPROVING</pickEarlyType>-->
    <!--</forager>-->
  <!--</localSearch>-->

  <!-- To super scale out, replace <constructionHeuristic> and <localSearch> with this configuration: -->
  <!--<customPhase>-->
    <!--<customPhaseCommandClass>org.optaplanner.examples.nqueens.optional.solver.solution.CheatingNQueensPhaseCommand</customPhaseCommandClass>-->
  <!--</customPhase>-->
</solver>
